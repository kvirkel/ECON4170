## Seminar 4 - Week 39 ##

#### packages ####

library(tidyverse)
library(ggplot2)
library(magrittr)


##########################
## GDP across the world ##
##########################

#### Task 1: Importing data ####

# by script

setwd("YOUR WORKING DIRECTORY")

pwt <- read_csv(
  file = "pwt.csv", # input data
)

# by import function in RStudio
# file -> import dataset -> from text

#### Task 2: Filtering ####

gdp_nor <- filter(pwt, country == "Norway")

gdp_nor <- gdp_nor %>%
  select(year, gdp)

#### Task 3: Annual growth rates for China ####

pwt.china <- pwt %>%
  select(country, year, gdp) %>%
  mutate(gdprate = (gdp - lag(gdp)) / lag(gdp)) %>%
  filter(country == "China" & year >= 1970 & year <= 2000) %>%
  select(year, gdprate)

# clearing environment, reloading data
rm(list = ls())
pwt <- read_csv("pwt.csv")


#####################
## The Solow Model ##
#####################

#### Task 1: Transform data ####
pwt.growth <- pwt %>%
  mutate(lgdp = log(gdp)) %>% # creating new log variable
  filter(year == 1970 | year == 2000) %>% # choosing 1970 AND 2000
  select(country, year, lgdp) %>% # filtering relevant info
  pivot_wider(names_from = year, values_from = lgdp) %>% # year as headers
  rename(lgdp1970 = "1970", lgdp2000 = "2000") %>% # easier to work with no numbers
  mutate(growth = (lgdp2000 - lgdp1970)) # approx. growth ln(y2/y1) = ln y2 - ln y1

#### Task 2: Plotting ####

pwt.growth %>%
  ggplot((aes(x = lgdp1970, y = growth))) +
  geom_point()

#### Task 3: Dummy and counting ####

annualgrowth <- pwt %>%
  group_by(country) %>% # if we don't group by something, will compute mean across all observations (all countries, all years)
  mutate(increase = ifelse(gdp > lag(gdp), 1, 0))

growthfractions <- annualgrowth %>%
  group_by(country) %>%
  summarise(fraction = mean(increase, na.rm = TRUE)) # na.rm = T means removing NAs.

#### Task 4: Comparing results ####

# Can compare visually

# Merging data

compare <- inner_join(x = pwt.growth, y = growthfractions, by = c("country" = "country"))

# Creating plot

compare %>%
  ggplot(aes(x = growth, y = fraction)) +
  geom_point()

# clearing environment
rm(list = ls())

############################
## Proportional elections ##
############################

#### Task 1: Creating algorithm ####

representatives <- function(votes, totseats) { # totseats: How many seats are to be allocated
  repr <- 0 * votes # create empty vector with same length as votes, to fill with reps
  for (seat in 1:totseats) { # The loop should run as many times as there are seats
    party <- which.max(votes / (1 + repr)) # get position(linenumber) of largest vote (=the party that gets the seat)
    repr[party] <- repr[party] + 1 # increase that party's number of representatives with 1
  }
  return(repr)
}

#### Task 2: Oslo example ####

parties.oslo <- c(
  "Høyre",
  "Arbeiderpartiet",
  "Miljøpartiet De Grønne",
  "Sosialistisk Venstreparti",
  "Folkeaksjonen Nei til mer bompenger",
  "Venstre",
  "Fremskrittspartiet",
  "Senterpartiet",
  "Kristelig Folkeparti",
  "Pensjonistpartiet",
  "Demokratene i Norge",
  "Helsepartiet",
  "Liberalistene",
  "Piratpartiet",
  "Partiet De Kristne",
  "Selvstendighetspartiet",
  "Feministisk Initiativ",
  "Alliansen",
  "Norges Kommunistiske Parti",
  "Kystpartiet"
)
votes.oslo <- c(
  91906, 72564, 54879, 32831, 26038, 21209, 20789, 19082, 7852, 6285, 2206,
  961, 837, 805, 683, 608, 571, 568, 387, 262, 156
)

result.oslo <- representatives(votes.oslo, 59)
paste(parties.oslo[result.oslo > 0], result.oslo[result.oslo > 0]) # excluding those who got 0 representatives


#### Task 3: Representatives in regional elections ####
election <- read_csv("election.csv")

# Extracting regions
regions <- election %>% pull(Fylkenavn) # can also use regions <- election$Fylkesnavn

# Extracting Party names
parties <- election %>%
  select(-Fylkenavn, -Fylkenummer, -repr) %>% # all except these three
  colnames() # export column names

# Vectorization method
votes_all <- election %>%
  select(parties) %>%
  replace(., is.na(.), 0) # . is a placeholder, referring to votes_all

nrep_all <- election %>%
  select(repr)

result <- 0 * votes_all # Empty tibble to store each partys number of representatives

# filling result tibble
for (i in 1:nrow(nrep_all)) { # nrow(matrix) returns the number of rows
  result[i, ] <- representatives(votes_all[i, ], as.double(nrep_all[i, ]))
}
result <- as_tibble(result)

## Name the dimensions for nicer output
colnames(result) <- parties
rownames(result) <- regions

rm(list = ls())

#### Task 4: Other methods ####

parties.oslo <- c(
  "Høyre",
  "Arbeiderpartiet",
  "Miljøpartiet De Grønne",
  "Sosialistisk Venstreparti",
  "Folkeaksjonen Nei til mer bompenger",
  "Venstre",
  "Fremskrittspartiet",
  "Senterpartiet",
  "Kristelig Folkeparti",
  "Pensjonistpartiet",
  "Demokratene i Norge",
  "Helsepartiet",
  "Liberalistene",
  "Piratpartiet",
  "Partiet De Kristne",
  "Selvstendighetspartiet",
  "Feministisk Initiativ",
  "Alliansen",
  "Norges Kommunistiske Parti",
  "Kystpartiet"
)
votes.oslo <- c(
  91906, 72564, 54879, 32831, 26038, 21209, 20789, 19082, 7852, 6285, 2206,
  961, 837, 805, 683, 608, 571, 568, 387, 262, 156
)

## Sainte-Laguë: 1, 3, 5 ...

representatives.sl <- function(votes, totseats) { # totseats: How many seats are to be allocated
  repr <- 0 * votes # create empty vector with same length as votes, to fill with reps
  for (seat in 1:totseats) { # The loop should run as many times as there are seats
    party <- which.max(votes / (1 + 2 * repr)) # get position(linenumber) of largest vote (=the party that gets the seat)
    repr[party] <- repr[party] + 1 # increase that party's number of representatives with 1
  }
  return(repr)
}

result.sl <- representatives.sl(votes.oslo, 59)
paste(parties.oslo[result.sl > 0], result.sl[result.sl > 0]) # excluding those who got 0 representatives

## Modified SL: 1.4, 3, 5...

# create divisor vector

divisors <- c(2 * (1:10) - 1)
divisors[1] <- 1.4

# modify function
representatives.msl <- function(votes, totseats) {
  repr <- 0 * votes
  for (seat in 1:totseats) {
    party <- which.max(votes / divisors[repr + 1]) # can now be used on all versions, just change divisors vector
    repr[party] <- repr[party] + 1
  }
  return(repr)
}


result.msl <- representatives.msl(votes.oslo, 59)
paste(parties.oslo[result.msl > 0], result.msl[result.msl > 0]) # excluding those who got 0 representatives
