## Retriever/PoP merging ##

rm(list = ls())

setwd("C:/Users/linns/OneDrive/Dokumenter/Skole/4170 - Data Science/4170 R/Retriever")

#### packages ####
library(readxl)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(caret)
library(ranger)
library(gbm)
library(lubridate)
library(PxWebApiData)
library(rjstat)
library(httr)
library(sf)
library(tibble)
library(rjson)
library(dplyr)

#### importing and editing datasets for keyword search ####

innvandr <- read_excel("innvandr.xlsx") %>%
  rename(innvandring = "1. januar 2008 - 30. september 2021") # renaming for clarity

eldre <- read_excel("eldre.xlsx") %>%
  rename(eldre = "1. januar 2008 - 30. september 2021")

skattavgift <- read_excel("skattavgiftbompenge.xlsx") %>%
  rename(skattavgift = "1. januar 2008 - 30. september 2021")

## merging

artikler <- tibble(month = innvandr$Category,  # "Category" indicates month in original data frame
                   innvandring = innvandr$innvandring,
                   eldre = eldre$eldre,
                   skattavgift = skattavgift$skattavgift) %>%
  mutate(tot.art = innvandring + eldre + skattavgift) %>% # column for total number of articles
  mutate(month = format(as.Date(seq(as.Date("01-01-2008", "%d-%m-%Y"), 
                                    as.Date("30-09-2021", "%d-%m-%Y"),
                                    by = "month")), "%Y(%m)")) 

## changing months to dates category


#### importing unemployment data ####
url <- "https://data.ssb.no/api/v0/no/table/13332/"

data <- '
{
  "query": [
    {
      "code": "Kjonn",
      "selection": {
        "filter": "item",
        "values": [
          "0"
        ]
      }
    },
    {
      "code": "ContentsCode",
      "selection": {
        "filter": "item",
        "values": [
          "Arbeidslause4"
        ]
      }
    },
    {
      "code": "Tid",
      "selection": {
        "filter": "item",
        "values": [
          "2008M01",
          "2008M02",
          "2008M03",
          "2008M04",
          "2008M05",
          "2008M06",
          "2008M07",
          "2008M08",
          "2008M09",
          "2008M10",
          "2008M11",
          "2008M12",
          "2009M01",
          "2009M02",
          "2009M03",
          "2009M04",
          "2009M05",
          "2009M06",
          "2009M07",
          "2009M08",
          "2009M09",
          "2009M10",
          "2009M11",
          "2009M12",
          "2010M01",
          "2010M02",
          "2010M03",
          "2010M04",
          "2010M05",
          "2010M06",
          "2010M07",
          "2010M08",
          "2010M09",
          "2010M10",
          "2010M11",
          "2010M12",
          "2011M01",
          "2011M02",
          "2011M03",
          "2011M04",
          "2011M05",
          "2011M06",
          "2011M07",
          "2011M08",
          "2011M09",
          "2011M10",
          "2011M11",
          "2011M12",
          "2012M01",
          "2012M02",
          "2012M03",
          "2012M04",
          "2012M05",
          "2012M06",
          "2012M07",
          "2012M08",
          "2012M09",
          "2012M10",
          "2012M11",
          "2012M12",
          "2013M01",
          "2013M02",
          "2013M03",
          "2013M04",
          "2013M05",
          "2013M06",
          "2013M07",
          "2013M08",
          "2013M09",
          "2013M10",
          "2013M11",
          "2013M12",
          "2014M01",
          "2014M02",
          "2014M03",
          "2014M04",
          "2014M05",
          "2014M06",
          "2014M07",
          "2014M08",
          "2014M09",
          "2014M10",
          "2014M11",
          "2014M12",
          "2015M01",
          "2015M02",
          "2015M03",
          "2015M04",
          "2015M05",
          "2015M06",
          "2015M07",
          "2015M08",
          "2015M09",
          "2015M10",
          "2015M11",
          "2015M12",
          "2016M01",
          "2016M02",
          "2016M03",
          "2016M04",
          "2016M05",
          "2016M06",
          "2016M07",
          "2016M08",
          "2016M09",
          "2016M10",
          "2016M11",
          "2016M12",
          "2017M01",
          "2017M02",
          "2017M03",
          "2017M04",
          "2017M05",
          "2017M06",
          "2017M07",
          "2017M08",
          "2017M09",
          "2017M10",
          "2017M11",
          "2017M12",
          "2018M01",
          "2018M02",
          "2018M03",
          "2018M04",
          "2018M05",
          "2018M06",
          "2018M07",
          "2018M08",
          "2018M09",
          "2018M10",
          "2018M11",
          "2018M12",
          "2019M01",
          "2019M02",
          "2019M03",
          "2019M04",
          "2019M05",
          "2019M06",
          "2019M07",
          "2019M08",
          "2019M09",
          "2019M10",
          "2019M11",
          "2019M12",
          "2020M01",
          "2020M02",
          "2020M03",
          "2020M04",
          "2020M05",
          "2020M06",
          "2020M07",
          "2020M08",
          "2020M09",
          "2020M10",
          "2020M11",
          "2020M12",
          "2021M01",
          "2021M02",
          "2021M03",
          "2021M04",
          "2021M05",
          "2021M06",
          "2021M07",
          "2021M08"
        ]
      }
    }
  ],
  "response": {
    "format": "json-stat2"
  }
}
'

d.tmp <- POST(url , body = data, encode = "json", verbose())

# Henter ut innholdet fra d.tmp som tekst deretter bearbeides av fromJSONstat

unemployment <- fromJSONstat(content(d.tmp, "text")) %>% 
  mutate(month = format(as.Date(seq(as.Date("01-01-2008", "%d-%m-%Y"), # changing months to match with other data frame
                                        as.Date("30-08-2021", "%d-%m-%Y"), 
                                        by = "month")), "%Y(%m)")) %>%
  rename(ue.rate=value) %>% 
  select(month,ue.rate) %>% #removing irrelevant columns
  mutate(ue.change=ue.rate-lag(ue.rate)) #creating column for change in unemployment rate (pp)

art.unemp <- inner_join(artikler,unemployment,by=c("month"="month")) #merging articles and unemployment rate
  


#### importing, editing and merging poll stats ####
poll <- read.csv2("polls.csv") %>%
  mutate(pcts.frp = sub(" \\(.*", "", Frp)) %>% # removing (representatives) from percentage column
  mutate(month = rev(format(as.Date(seq(as.Date("01-01-2008", "%d-%m-%Y"), # changing months to match with other data frame
                                        as.Date("30-11-2021", "%d-%m-%Y"), 
                                        by = "month")), "%Y(%m)"))) %>%
  select(month, pcts.frp)

fullframe <- inner_join(art.unemp, poll, by = c("month" = "month")) %>% # merging data frames where "month" is identical
  mutate(pcts.frp = as.numeric(sub(",", ".", pcts.frp))) # changing from comma to period to identify numeric variables

rm(art.unemp,artikler,d.tmp,eldre,innvandr,poll,skattavgift,unemployment,data,url)

#### machine learning ####

set.seed(4170) #to be able to replicate the results

learning.frame <- fullframe %>% 
  select(-month,-tot.art,-ue.change) %>% 
  na.omit()#removing irrelevant and double-counting columns

# Creating a data partition to make a balanced split of the data.
# We use 80 % of the data to train the algorithm and test it on the remaining 20 %.

index <- createDataPartition(learning.frame$pcts.frp, times = 1, p = 0.8, list = FALSE) # p is % that is used in training
frp.train <- learning.frame[index, ] # dataset for training
frp.test <- learning.frame[-index, ] # dataset for testing

# We train the model with out-of-sample testing. To do so, we split the data set 
# in 10 and then in 10 again, taking 9/10 in each group as training and the last as test.

ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)

## Method 1: OLS
# We start with the simplest method

ols.mod <- train(pcts.frp ~ .,
                 data = frp.train,
                 method = "lm",
                 trControl = ctrl
)

ols.mod
varImp(ols.mod)

## Method 2: Random forest
rf.mod <- train(pcts.frp ~ .,
                          data = frp.train,
                          method = "ranger", # code for random forest method given in problem text
                          importance = "permutation", # Argument used to obtain varImp in next problem (given in problem text)
                          trControl = ctrl
)

rf.mod
varImp(rf.mod)

## Method 3: Boosting Tree

bt.mod <- train(pcts.frp ~ .,
                          data = frp.train,
                          method = "gbm",
                          trControl = ctrl
)
bt.mod
varImp(bt.mod) 

#### Prediction/Testing the models ####
ols.pred <- predict(ols.mod, frp.test)
rf.pred <- predict(rf.mod, frp.test)
bt.pred <- predict(bt.mod, frp.test)

results <- tibble(ols.pred, rf.pred, bt.pred, 
                  pcts.frp = frp.test$pcts.frp) %>% 
  mutate(ols.error=ols.pred-pcts.frp, #columns for errors
         rf.error=rf.pred-pcts.frp,
         bt.error=bt.pred-pcts.frp) %>% 
  mutate(mse.ols=mean(ols.error^2),
         mse.rf=mean(rf.error^2),
         mse.bt=mean(bt.error^2))

# random forest has lowest mean square errors, looks like the best.

# check histogram of errors

results %>%
  ggplot() +
  geom_density(aes(x = ols.error, color = "ols error")) +
  geom_density(aes(x = rf.error, color = "random forest error")) +
  geom_density(aes(x = bt.error, color = "boosting tree error"))+
  labs(y="Density",x="Error")+
  ggtitle("Density plot of errors")+
  geom_vline(xintercept=0)
