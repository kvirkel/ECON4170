## Exam 2021 ##

#### README/IMPORTANT NOTES ####
## I have previously set my working directory using setwd("directory location"),
## but will not include this in the code to ensure anonymity.

#### PACKAGES ####
library(tidyverse)
library(readxl)
library(ineq)

#### PROBLEM 1 ####
## Task 1
cps <- read_excel("100757010-cps_100771082_1639472229300.xlsx")

cps %>% 
  group_by(female) %>% 
  summarise(mean=mean(ahe))

# mean is 20.9 for men and 18.3 for women

## Task 2

cps <- cps %>% 
  mutate(ai=ahe*8*5*50) %>% 
  mutate(airank=(rank(ai, ties.method = "first")-1)/(nrow(cps)-1)) #comment ties.method (makes Lorenz prettier later), -1 to start at 0

## Task 3
dec.length <- (1-0)/10

rank.tiers <- seq(0,1,by=dec.length)

cps <- cps %>% 
  mutate(decile = cut(airank, breaks = quantile(airank, probs = seq(0, 1, 0.1)), 
             labels = 1:10, include.lowest = T))

femfrac <- cps %>% 
  group_by(decile) %>% 
  summarise(f.frac=sum(female==1)/length(female))

femfrac %>% 
  ggplot()+
  geom_bar(aes(x=decile,y=f.frac),stat="identity")+
  labs(x="Income Decile", y="Fraction of women")


# should not use femfrac %>% ggplot()+geom_line(aes(x=decile,y=f.frac,group=1))

## Task 4

cps <- cps %>% 
  mutate(lor.p=1) %>% # initializing column
  arrange(ai) #arranging dataset after ai for simplicity

denom <- nrow(cps)*mean(cps$ai)
num=0

for (i in c(1:nrow(cps))) {
  num <- cps$ai[i]+num
  cps$lor.p[i] <- num/denom
}


cps %>% 
  ggplot(aes(x=airank,y=lor.p))+
  geom_line()+
  geom_abline(intercept = 0, slope = 1)+
  labs(x="Income rank", y="L(i)")

## Task 5
t=0.25
avg.tax = mean(cps$ai)*t

cps <- cps %>% 
  mutate(ai.taxed = ai*(1-t)) %>% 
  mutate(ai.transf=ai.taxed+avg.tax)

# same as in 4)

cps <- cps %>% 
  mutate(lor.p.tax=1) %>% 
  arrange(ai.transf)

denom <- nrow(cps)*mean(cps$ai.transf)
num=0

for (i in c(1:nrow(cps))) {
  num <- cps$ai.transf[i]+num
  cps$lor.p.tax[i] <- num/denom
}

cps %>% 
  ggplot(aes(x=airank)) +  #
  geom_line(aes(y=lor.p, color="No tax"))+
  geom_line(aes(y=lor.p.tax,color="With tax"))+
  geom_abline(intercept = 0, slope = 1)+
  labs(x="Income rank", y="L(i)")

## Task 6
incomes_couples <- read_csv("100757010-incomes_couples_100772843_1639472808107.csv")

Gini(incomes_couples$inc)

incomes_couples %>% 
  group_by(female) %>% 
  summarise(gini=Gini(inc))

## Task 7
hh.incomes <- incomes_couples %>% 
  group_by(hhid) %>% 
  summarise(hhinc=sum(inc))

Gini(hh.incomes$hhinc)

bothincomes <- incomes_couples %>% 
  select(hhid,inc,female) %>% 
  pivot_wider(names_from=female,values_from=inc) %>% 
  rename(male.inc="FALSE",female.inc="TRUE")

cor(bothincomes$male.inc,bothincomes$female.inc)

## Task 8

randomcouples <- tibble(male.inc=bothincomes$male.inc,
                        female.inc=sample(bothincomes$female.inc,replace=F),
                        hhid=c(1:nrow(bothincomes))) %>% 
  mutate(hhinc=male.inc+female.inc)

Gini(randomcouples$hhinc)

#### PROBLEM 2 ####
ladders <- read_csv("100757010-ladders_100774473_1639473454283.csv")

## Task 1

s=0 #current square
r=0 # number of rolls
# basic loop:
while(s<90) {
  s <- s+sample(1:6,1)
  r<- r+1
}

rolls=c() #initiating vector of r
i <- 1 #iterations
# repeat 10 000 times, compute average
repeat { 
  r <-0
  s <-0
  while(s<90) {
    s <- s+sample(1:6,1)
    r<-r+1
  } 
  rolls[i] <-r
  i<- i+1
  if(i>10000) {
    break
  }
}
mean(rolls)

ggplot()+
  aes(rolls)+
  geom_histogram(binwidth=1,color="white")+
  labs(x="Number of rolls", y="occurences")

## Task 2
r <- 0
s <- 0

while(s < 90) {
  s <- s + sample(1:6,1)
  r <- r + 1
  # Need to check if we landed on a ladder and move forward or back
  if (any(ladders$start %in% s)) {
    s <- ladders$end[ladders$start %in% s]
  }
}


# again, do the same in a repeat loop
i <- 0
r <- 0
s <- 0
rolls <- c()


repeat { 
  r <-0
  s <-0
  while(s < 90) {
    s <- s + sample(1:6,1)
    r <- r + 1
    # Need to check if we landed on a ladder and move forward or back
    if (any(ladders$start %in% s)) {
      s <- ladders$end[ladders$start %in% s]
    }
  } 
  rolls[i] <-r
  i<- i+1
  if(i>10000) {
    break
  }
}
mean(rolls)

ggplot()+
  aes(rolls)+
  geom_histogram(binwidth=1,color="white")+
  labs(x="Number of rolls", y="occurences")

## Task 3

# To make this a lot easier, expand ladders data frame to go both ways
revladders <- ladders %>% 
  rename(start=end,end=start)

bothways <- rbind(ladders,revladders) 

# could also ad another if function with reverse commands

# can now use same function

s <- 0
r <- 0

while(s < 90) {
  s <- s + sample(1:6,1)
  r <- r + 1
  if (any(bothways$start %in% s)) {
    s <- bothways$end[bothways$start %in% s]
  }
}

# again, repeat
i <- 0
r <- 0
s <- 0
rolls <- c()

repeat { 
  r <-0
  s <-0
  while(s < 90) {
    s <- s + sample(1:6,1)
    r <- r + 1
    if (any(bothways$start %in% s)) {
      s <- bothways$end[bothways$start %in% s]
    }
  }
  rolls[i] <-r
  i<- i+1
  if(i>10000) {
    break
  }
}
mean(rolls)

ggplot()+
  aes(rolls)+
  geom_histogram(binwidth=1,color="white")+
  labs(x="Number of rolls", y="occurences")

## Task 4

ladders_giant <- read_csv("100757010-ladders_giant_100774515_1639473471799.csv")
# assuming "regular" game dynamics, if not, do same as previous task

s <- 0
r <- 0

while(s < 1000) {
  s <- s + sample(1:6,1)
  r <- r + 1
  if (any(ladders_giant$start %in% s)) {
    s <- ladders_giant$end[ladders_giant$start %in% s]
  }
}

# again, repeat
i <- 0
r <- 0
s <- 0
rolls <- c()

repeat { 
  r <-0
  s <-0
  while(s < 1000) {
    s <- s + sample(1:6,1)
    r <- r + 1
    if (any(ladders_giant$start %in% s)) {
      s <- ladders_giant$end[ladders_giant$start %in% s]
    }
  }
  rolls[i] <-r
  i<- i+1
  if(i>10000) {
    break
  }
}
mean(rolls)

ggplot()+
  aes(rolls)+
  geom_histogram(binwidth=1)+
  labs(x="Number of rolls", y="occurences")


